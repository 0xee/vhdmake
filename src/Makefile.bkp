TARGET=vhdmake

SRC = $(wildcard *.cpp)
HEADERS = $(wildcard *.h)

OBJDIR=obj
OBJS = $(patsubst %.cpp,$(OBJDIR)/%.o,$(SRC))

COCO_PATH=../../CocoLinux

CXX=g++
CXXFLAGS=-g3 -std=c++11 -O0 
LDFLAGS=-lboost_system -lboost_filesystem
DEPS := $(OBJS:.o=.d)

NODEPS=clean

GENSRC=Parser.h Scanner.h

ATG=vhdl

TESTSRC=../test

test: $(TARGET)
	./$(TARGET) -s ../test/test.vhd
#	cd ../test && ../src/$(TARGET)

install: $(TARGET)
	cp $(TARGET) /usr/bin/
  

parser.target: $(ATG).atg
	echo "Generating scanner/parser"
	rm -f {Parser,Scanner}.{h,cpp}
	$(COCO_PATH)/Coco -frames $(COCO_PATH) $(ATG).atg -namespace $(ATG)
	if [ -f Parser.h ]; then \
	 touch parser.target; \
	fi

$(TARGET): $(OBJS) 
	g++ -o $(TARGET) $(LDFLAGS) $(OBJS)

#Don't create dependencies when we're cleaning, for instance
ifeq (0, $(words $(findstring $(MAKECMDGOALS), $(NODEPS))))
-include $(DEPS)
endif

#This is the rule for creating the dependency files
obj/%.d: %.cpp parser.target
	$(CXX) $(CXXFLAGS) -MM -MT '$(patsubst %.cpp,$(OBJDIR)/%.o,$<)' $< -MF $@


$(OBJS): | $(OBJDIR)
$(OBJS): | parser.target

$(DEPS): | $(OBJDIR)
$(DEPS): | parser.target

$(OBJDIR)/%.o : %.cpp $(OBJDIR)/%.d $(GENSRC)
	@echo Compiling $<
	$(CXX) $(CXXFLAGS) -c $< -o $@


run: $(TARGET)
	./$(TARGET)


$(OBJDIR):
	@mkdir -p $@


check-syntax:
	$(CXX) -std=c++11 -Wall -Wextra -pedantic -fsyntax-only $(CHK_SOURCES)

.PHONY: check-syntax

clean:
	rm -rf  core.* $(TARGET) *.log $(OBJDIR) $(GENSRC) $(LOG) parser.target
	rm -rf  $(patsubst %.h,%.cpp,$(GENSRC))
.PHONY: clean

